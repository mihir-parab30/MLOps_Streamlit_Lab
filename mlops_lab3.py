# -*- coding: utf-8 -*-
"""MLOps_Lab3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RgRtFXYzFJ0cQ1A180u-fLQ9FUcOMCVT
"""

# Commented out IPython magic to ensure Python compatibility.
# 1) basic installs for this lab
!pip -q install streamlit==1.37.1 pyngrok==7.1.6 scikit-learn==1.5.2 pandas==2.2.2 joblib==1.4.2

# 2) clone the MLOps repo and go to the Streamlit lab folder
# %cd /content
!rm -rf MLOps
!git clone https://github.com/raminmohammadi/MLOps.git
# %cd /content/MLOps/Labs/API_Labs/Streamlit_Labs
!ls -la

# 1️⃣ train and save a Wine Quality model
from sklearn.datasets import load_wine
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
import pandas as pd, joblib

# load data
wine = load_wine()
X, y = wine.data, wine.target

# split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# train model
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# test accuracy
print("Accuracy:", accuracy_score(y_test, model.predict(X_test)))

# save model to match lab structure
import os
os.makedirs("../FastAPI_Labs/model", exist_ok=True)
joblib.dump(model, "../FastAPI_Labs/model/wine_model.pkl")

# Commented out IPython magic to ensure Python compatibility.
# %%writefile /content/MLOps/Labs/API_Labs/Streamlit_Labs/src/Dashboard.py
# # ---------------------------------
# # WINE QUALITY STREAMLIT DASHBOARD
# # ---------------------------------
# import streamlit as st
# import joblib
# import numpy as np
# import pandas as pd
# from sklearn.datasets import load_wine
# import plotly.express as px
# from pathlib import Path
# 
# # ---------------------------------
# # LOAD MODEL
# # ---------------------------------
# MODEL_PATH = Path("/content/MLOps/Labs/API_Labs/FastAPI_Labs/model/wine_model.pkl")
# st.set_page_config(page_title="Wine Quality Prediction Demo", page_icon="🍷", layout="wide")
# 
# try:
#     model = joblib.load(MODEL_PATH)
#     st.success("✅ Model loaded successfully!")
# except Exception as e:
#     st.error(f"⚠️ Error loading model: {e}")
#     st.stop()
# 
# # ---------------------------------
# # PAGE TITLE
# # ---------------------------------
# st.title("🍷 Wine Quality Prediction Dashboard")
# st.write("Predict the **wine cultivar (Class 0 / 1 / 2)** using chemical properties and explore the dataset interactively.")
# 
# # ---------------------------------
# # TABS
# # ---------------------------------
# tab1, tab2, tab3 = st.tabs(["🏠 Prediction", "📊 Data Exploration", "ℹ️ About"])
# 
# # ---------------------------------
# # TAB 1: PREDICTION
# # ---------------------------------
# with tab1:
#     st.header("Wine Class Prediction")
# 
#     # Sidebar sliders
#     st.sidebar.header("Input Features")
#     alcohol = st.sidebar.slider("Alcohol", 8.0, 15.0, 12.0)
#     malic_acid = st.sidebar.slider("Malic Acid", 0.5, 5.0, 2.0)
#     ash = st.sidebar.slider("Ash", 1.0, 3.5, 2.3)
#     alcalinity = st.sidebar.slider("Alcalinity of Ash", 10.0, 30.0, 15.0)
#     magnesium = st.sidebar.slider("Magnesium", 70, 160, 100)
#     total_phenols = st.sidebar.slider("Total Phenols", 0.5, 4.0, 2.0)
#     flavanoids = st.sidebar.slider("Flavanoids", 0.0, 6.0, 3.0)
#     nonflavanoid_phenols = st.sidebar.slider("Nonflavanoid Phenols", 0.0, 1.0, 0.3)
#     proanthocyanins = st.sidebar.slider("Proanthocyanins", 0.5, 4.0, 1.5)
#     color_intensity = st.sidebar.slider("Color Intensity", 1.0, 15.0, 5.0)
#     hue = st.sidebar.slider("Hue", 0.5, 2.0, 1.0)
#     od_ratio = st.sidebar.slider("OD280/OD315", 1.0, 4.0, 2.5)
#     proline = st.sidebar.slider("Proline", 300, 1800, 800)
# 
#     # Summary table
#     st.markdown("### 🧾 Your Input Summary")
#     input_df = pd.DataFrame({
#         "Alcohol":[alcohol],"Malic Acid":[malic_acid],"Ash":[ash],"Alcalinity":[alcalinity],
#         "Magnesium":[magnesium],"Total Phenols":[total_phenols],"Flavanoids":[flavanoids],
#         "Nonflavanoid Phenols":[nonflavanoid_phenols],"Proanthocyanins":[proanthocyanins],
#         "Color Intensity":[color_intensity],"Hue":[hue],"OD280/OD315":[od_ratio],"Proline":[proline]
#     })
#     st.dataframe(input_df)
# 
#     # Prediction
#     if st.button("🔍 Predict Wine Class"):
#         features = np.array([[alcohol, malic_acid, ash, alcalinity, magnesium,
#                               total_phenols, flavanoids, nonflavanoid_phenols,
#                               proanthocyanins, color_intensity, hue, od_ratio, proline]])
#         try:
#             prediction = model.predict(features)[0]
#             probs = model.predict_proba(features)[0]
# 
#             class_map = {0:"Cultivar 1",1:"Cultivar 2",2:"Cultivar 3"}
#             st.success(f"**Predicted Wine Class:** {class_map[prediction]}")
# 
#             if prediction==0:
#                 st.info("🍇 Cultivar 1 – higher alcohol & lower ash.")
#             elif prediction==1:
#                 st.info("🍷 Cultivar 2 – balanced phenols & medium hue.")
#             else:
#                 st.info("🍾 Cultivar 3 – rich color & high proline.")
# 
#             probs_df = pd.DataFrame({
#                 "Cultivar":["Cultivar 1","Cultivar 2","Cultivar 3"],
#                 "Probability":probs
#             })
#             fig = px.bar(probs_df, x="Cultivar", y="Probability", color="Cultivar",
#                          color_discrete_sequence=["#b5179e","#7209b7","#560bad"],
#                          title="Prediction Confidence")
#             st.plotly_chart(fig, use_container_width=True)
# 
#         except Exception as e:
#             st.error(f"Prediction error: {e}")
# 
# # ---------------------------------
# # TAB 2: DATA EXPLORATION
# # ---------------------------------
# with tab2:
#     st.header("📊 Explore the Wine Dataset")
#     wine = load_wine()
#     df = pd.DataFrame(wine.data, columns=wine.feature_names)
#     df["target"] = wine.target
# 
#     feature = st.selectbox("Select a feature to visualize", df.columns[:-1])
#     fig = px.histogram(df, x=feature, color=df["target"].astype(str),
#                        nbins=20, barmode="overlay",
#                        color_discrete_sequence=["#b5179e","#7209b7","#560bad"],
#                        title=f"Distribution of {feature.title()} by Cultivar")
#     st.plotly_chart(fig, use_container_width=True)
# 
# # ---------------------------------
# # TAB 3: ABOUT
# # ---------------------------------
# with tab3:
#     st.header("ℹ️ About This App")
#     st.write("""
#     - **Author:** Mihir Parab
#     - **Course:** MLOps Streamlit Lab
#     - **Dataset:** scikit-learn Wine Dataset
#     - **Model:** Random Forest Classifier
#     - **Built with:** Python · Streamlit · Plotly
#     """)
#     st.caption("Developed for MLOps Streamlit Lab — modified by Mihir Parab 🍇")
#

!pip install pyngrok --quiet

from pyngrok import ngrok
ngrok.set_auth_token("34M9eQF1T5vmKT0lO14hTCsjpJd_5RCHqjCXitUWf5DfaMfdf")
print("✅ ngrok token added!")

from pyngrok import ngrok
import time

# run streamlit on port 8501
public_url = ngrok.connect(8501)
print("🌍 Streamlit app is live here:", public_url.public_url)

# run the app
!streamlit run /content/MLOps/Labs/API_Labs/Streamlit_Labs/src/Dashboard.py --server.port 8501 > /dev/null &

!cd /content/MLOps
!git init
!git config --global user.name "mihir-parab30"
!git config --global user.email "mihirhparab26@gmail.com"

!git remote add origin https://github.com/mihir-parab30/MLOps_Streamlit_Lab.git

!git add .
!git commit -m "Initial commit - Streamlit Wine Quality Lab"

import os

# Replace with your actual GitHub username and token
GITHUB_USER = "YOUR_USERNAME"
GITHUB_TOKEN = "YOUR_TOKEN"  # paste your token here securely
REPO_NAME = "MLOps_Streamlit_Lab"  # your repo name

os.environ['GITHUB_TOKEN'] = GITHUB_TOKEN

# Set up remote with token authentication
!git remote remove origin
!git remote add origin https://{GITHUB_USER}:{GITHUB_TOKEN}@github.com/{GITHUB_USER}/{REPO_NAME}.git

!git add .
!git commit -m "Final Streamlit Lab submission"
!git branch -M main
!git push -u origin main

